facet_grid(. ~ churn)
ggplot(churnTrain, aes(x = account_length, fill = churn, colour = churn))+
geom_density()+
facet_grid(. ~ churn)
ggplot(churnTrain, aes(x = account_length, fill = churn, colour = churn))+
geom_density()+
facet_grid(churn ~. )
ggplot(churnTrain, aes(x = account_length, fill = churn, colour = churn))+
geom_density()+
facet_grid(. ~ churn)
ggplot(churnTrain, aes(x = account_length, fill = churn, colour = churn))+
geom_density(position = "stacked")+
facet_grid(. ~ churn)
ggplot(churnTrain, aes(x = account_length, fill = churn, colour = churn))+
geom_density(position = "stack")+
facet_grid(. ~ churn)
ggplot(churnTrain, aes(x = account_length, fill = churn, colour = churn))+
geom_density(position = "stack")
ggplot(churnTrain, aes(x = account_length, fill = churn))+
geom_density(position = "stack", colour = churn)
ggplot(churnTrain, aes(x = account_length, fill = churn, colour = churn))+
geom_density(position = "stack")+
facet_grid(. ~ churn)
View(churnTrain)
ggplot(churnTrain, aes(x = area_code, fill = churn, colour = churn))+
geom_density(position = "stack")+
facet_grid(. ~ churn)
ggplot(churnTrain, aes(x = area_code, fill = churn))+
geom_density(position = "stack")+
facet_grid(. ~ churn)
ggplot(churnTrain, aes(x = area_code, fill = churn))+
geom_density()+
facet_grid(. ~ churn)
ggplot(churnTrain, aes(x = area_code, fill = churn, colour = area_code))+
geom_density()+
facet_grid(. ~ churn)
data(churn)
churnTrain$area_code <- as.factor(churnTrain$area_code)
churnTest$area_code <- as.factor(churnTest$area_code)
ggplot(churnTrain, aes(x = account_length, fill = churn, colour = churn))+
geom_density(position = "stack")+
facet_grid(. ~ churn)
ggplot(churnTrain, aes(x = area_code, fill = churn, colour = area_code))+
geom_density()+
facet_grid(. ~ churn)
ggplot(churnTrain, aes(x = area_code, fill = churn))+
geom_density(colour = area_code)+
facet_grid(. ~ churn)
ggplot(churnTrain, aes(x = area_code, fill = churn))+
geom_density(churnTrain, colour = area_code)+
facet_grid(. ~ churn)
churnTrain$area_code <- as.factor(churnTrain$area_code)
churnTest$area_code <- as.factor(churnTest$area_code)
ggplot(churnTrain, aes(x = area_code, fill = churn))+
geom_density(churnTrain, colour = area_code)+
facet_grid(. ~ churn)
ggplot(churnTrain, aes(x = area_code, fill = churn))+
geom_density(churnTrain, aes(colour = area_code))+
facet_grid(. ~ churn)
ggplot(churnTrain, aes(x = area_code, fill = churn, colour = area_code))+
geom_density()+
facet_grid(. ~ churn)
library(caret)
glmMod <- train(churn ~., data = churnTrain, method = "glm")
summary(glmMod)
rm(list = ls())
library(C50)
data(churn)
library(ggplot2)
library(caret)
library(plyr)
library(dplyr)
table(churnTrain$churn)
summary(churnTrain)
summary(churnTrain)
str(churnTrain)
View(churnTrain)
View(churnTrain)
by_state <- churnTrain %>%
group_by(state) %>%
summarise(churn = sum())
View(by_state)
by_state <- churnTrain %>%
group_by(state) %>%
summarise(churn = length())
by_state <- churnTrain %>%
group_by(state, churn) %>%
summarise(churn = length(churn))
by_state <- churnTrain %>%
group_by(state) %>%
summarise(churn = length(churn))
by_state <- churnTrain %>%
group_by(state, churn) %>%
summarise(churn = count())
by_state <- churnTrain %>%
group_by(state, churn) %>%
summarise(X = count())
by_state <- churnTrain %>%
group_by(state, churn) %>%
summarise(n = n())
ggplot()+
geom_density(by_state, aes(y = n, x = state, fill = churn))
ggplot()+
geom_density(by_state, aes(y = n, x = factor(state), fill = churn))
ggplot()+
geom_bar(by_state, aes(y = n, x = factor(state), fill = churn))
ggplot()+
geom_bar(by_state, aes(x = factor(state), fill = churn))
ggplot()+
geom_bar(by_state, aes(x = factor(state), fill = factor(churn)))
ggplot()+
geom_bar(mapping = aes(x = factor(state), fill = factor(churn)), data = by_state)
ggplot()+
geom_bar(mapping = aes(x = factor(state), y = n, fill = factor(churn)), data = by_state)
ggplot(by_state, mapping = aes(x = factor(state), y = n, fill = factor(churn)))+
geom_bar(stat = "identity")
ggplot(by_state, mapping = aes(x = state, y = n, fill = factor(churn)))+
geom_bar(stat = "identity")
ggplot(by_state, mapping = aes(x = state, y = n, fill = churn))+
geom_bar(stat = "identity")
by_area <- churnTrain %>%
group_by(area_code, churn) %>%
summarise(n = n())
ggplot(by_area, mapping = aes(x = area_code, y = n, fill = churn))+
geom_bar(stat = "identity")
View(by_area)
featurePlot(x = churnTrain$churn, y = churnTrain$international_plan, plot = "box")
Traincp <- churnTrain
nums <- sapply(Traincp, is.numeric)
Traincp <- Traincp[,nums]
library(corrplot)
View(Traincp)
ggplot(churnTrain, mapping = aes(x = account_length, fill = churn))+
geom_density()
ggplot(churnTrain, mapping = aes(x = factor(international_plan), fill = churn))+
geom_density()
ggplot(churnTrain, mapping = aes(x = factor(voice_mail_plan), fill = churn))+
geom_density()
ggplot(churnTrain, mapping = aes(x = factor(voice_mail_plan), fill = churn, alpha = 0.5))+
geom_density()
ggplot(churnTrain, mapping = aes(x = account_length, fill = churn, alpha = 0.5))+
geom_density()
ggplot(churnTrain, mapping = aes(x = factor(voice_mail_plan), fill = churn, alpha = 0.5))+
geom_density()
ggplot(churnTrain, mapping = aes(x = factor(international_plan), fill = churn, alpha = 0.5))+
geom_density()
ggplot(churnTrain, mapping = aes(x = factor(number_vmail_messages), fill = churn, alpha = 0.5))+
geom_density()
ggplot(churnTrain, mapping = aes(x = number_vmail_messages, fill = churn, alpha = 0.5))+
geom_density()
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
g1 <- ggplot(by_state, mapping = aes(x = state, y = n, fill = churn))+
geom_bar(stat = "identity")
g2 <- ggplot(by_area, mapping = aes(x = area_code, y = n, fill = churn))+
geom_bar(stat = "identity")
multiplot(g1, g2, cols=2)
g1 <- ggplot(by_state, mapping = aes(x = state, y = n, fill = churn))+
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
multiplot(g1, g2, cols=2)
g1 <- ggplot(by_state, mapping = aes(x = state, y = n, fill = churn))+
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
xlab("State") +
ylab("Number of Occurences")+
ggtitle("Churn by State")
g2 <- ggplot(by_area, mapping = aes(x = area_code, y = n, fill = churn))+
geom_bar(stat = "identity")+
xlab("Code Area") +
ylab("Number of Occurences")+
ggtitle("Churn by Code Area")
multiplot(g1, g2, cols = 2)
multiplot(g3, g4, g5, g6, cols = 2)
g3 <- ggplot(churnTrain, mapping = aes(x = account_length, fill = churn, alpha = 0.5))+
geom_density()
g4 <- ggplot(churnTrain, mapping = aes(x = factor(voice_mail_plan), fill = churn, alpha = 0.5))+
geom_density()
g5 <- ggplot(churnTrain, mapping = aes(x = factor(international_plan), fill = churn, alpha = 0.5))+
geom_density()
g6 <- ggplot(churnTrain, mapping = aes(x = number_vmail_messages, fill = churn, alpha = 0.5))+
geom_density()
multiplot(g3, g4, g5, g6, cols = 2)
g3 <- ggplot(churnTrain, mapping = aes(x = account_length, fill = churn, alpha = 0.5))+
geom_density()+
xlab("Account Length") +
ylab("Density")
# Seems that churn is not a matter of the account lenght
# voice_mail_plan
g4 <- ggplot(churnTrain, mapping = aes(x = factor(voice_mail_plan), fill = churn, alpha = 0.5))+
geom_density()+
xlab("Voice Mail Plan") +
ylab("Density")
# international_plan
g5 <- ggplot(churnTrain, mapping = aes(x = factor(international_plan), fill = churn, alpha = 0.5))+
geom_density()+
xlab("International Plan") +
ylab("Density")
# number_vmail_messages
g6 <- ggplot(churnTrain, mapping = aes(x = number_vmail_messages, fill = churn, alpha = 0.5))+
geom_density()+
xlab("Number vmail Messages") +
ylab("Density")
multiplot(g3, g4, g5, g6, cols = 2)
Traincp <- churnTrain
Traincp$churn <- as.numeric(as.factor(Traincp$churn))
View(Traincp)
nums <- sapply(Traincp, is.numeric)
Traincp <- Traincp[,nums]
CM <- cor(Traincp)
CM <- cor(Traincp)
corrplot(CM, method = "number", type = "upper")
g7 <- ggplot(churnTrain, mapping = aes(x = total_day_charge, fill = churn, alpha = 0.5))+
geom_density()+
xlab("Total Day Charge") +
ylab("Density")
g8 <- ggplot(churnTrain, mapping = aes(x = total_eve_charge, fill = churn, alpha = 0.5))+
geom_density()+
xlab("Total Evening Charge") +
ylab("Density")
g9 <- ggplot(churnTrain, mapping = aes(x = total_night_charge, fill = churn, alpha = 0.5))+
geom_density()+
xlab("Total Night Charge") +
ylab("Density")
g10 <- ggplot(churnTrain, mapping = aes(x = total_intl_charge, fill = churn, alpha = 0.5))+
geom_density()+
xlab("Total International Charge") +
ylab("Density")
multiplot(g7, g8, g, g10, cols = 2)
g7 <- ggplot(churnTrain, mapping = aes(x = total_day_charge, fill = churn, alpha = 0.5))+
geom_density()+
xlab("Total Day Charge") +
ylab("Density")
g8 <- ggplot(churnTrain, mapping = aes(x = total_eve_charge, fill = churn, alpha = 0.5))+
geom_density()+
xlab("Total Evening Charge") +
ylab("Density")
g9 <- ggplot(churnTrain, mapping = aes(x = total_night_charge, fill = churn, alpha = 0.5))+
geom_density()+
xlab("Total Night Charge") +
ylab("Density")
g10 <- ggplot(churnTrain, mapping = aes(x = total_intl_charge, fill = churn, alpha = 0.5))+
geom_density()+
xlab("Total International Charge") +
ylab("Density")
multiplot(g7, g8, g9, g10, cols = 2)
multiplot(g1, g2, cols = 2)
multiplot(g3, g4, g5, g6, cols = 2)
multiplot(g7, g8, g9, g10, cols = 2)
GLM <- train(churn ~., data = churnTrain, method = "glm")
summary(GLM)
View(churnTest)
?glm
GLM <- glm(churn ~., data = churnTrain, family = "binomial")
summary(GLM)
GLMPred <- predict(GLM, newdata = churnTest)
GLM <- glm(factor(churn) ~., data = churnTrain, family = "binomial")
summary(GLM)
GLMPred <- predict(GLM, newdata = churnTest)
GLM <- glm(churn ~., data = churnTrain,
family = binomial(link = "logit"))
summary(GLM)
GLMPred
View(churnTrain)
GLM <- glm(churn ~., data = churnTrain,
family = binomial())
summary(GLM)
churnTrain$churn <- ifelse(churnTrain$churn == "no", 0, 1)
GLM <- glm(churn ~., data = churnTrain,
family = binomial())
summary(GLM)
GLMPred <- predict(GLM, newdata = churnTest)
?predict
GLMPred <- predict(GLM, newdata = churnTest, type = "response")
GLMPred <- ifelse(GLMPred >= 0.3,  1, 0)
confusionMatrix(GLMPred, churnTest$churn)
churnTest$churn <- ifelse(churnTest$churn == "no", 0, 1)
confusionMatrix(GLMPred, churnTest$churn)
113/(1312+113)
GLMPred <- ifelse(GLMPred >= 0.2,  1, 0) # 0.3 threshold
GLMPred <- predict(GLM, newdata = churnTest, type = "response")
GLMPred <- ifelse(GLMPred >= 0.2,  1, 0) # 0.3 threshold
confusionMatrix(GLMPred, churnTest$churn)
GLMPred <- predict(GLM, newdata = churnTest, type = "response")
GLMPred <- ifelse(GLMPred >= 0.3,  1, 0) # 0.3 threshold
confusionMatrix(GLMPred, churnTest$churn)
confusionMatrix(churnTest$churn, GLMPred)
set.seed(1223)
library(rpart)
tree <- rpart(churn ~.,
data = churnTrain,
method = "class")
print(tree)
plot(tree)
fancyRpartPlot(tree, main="Decision Tree Churn")
library(rattle)
fancyRpartPlot(tree, main="Decision Tree Churn")
treePred <- predict(tree, newdata = churnTest, type = "response")
treePred <- predict(tree, newdata = churnTest)
treePred <- ifelse(treePred >= 0.3,  1, 0) # 0.3 threshold
confusionMatrix(churnTest$churn, treePred, dnn=c("Actual", "Predicted"))
treePred <- ifelse(treePred >= 0.3,  1, 0) # 0.3 threshold
confusionMatrix(churnTest$churn, treePred, dnn=c("Actual", "Predicted"))
confusionMatrix(churnTest$churn, treePred)
View(treePred)
treePred <- predict(tree, newdata = churnTest)
View(treePred)
?rpart
tree <- rpart(factor(churn) ~.,
data = churnTrain,
method = "class")
fancyRpartPlot(tree, main="Decision Tree Churn")
treePred <- predict(tree, newdata = churnTest)
treePred <- predict(tree, newdata = churnTest, type = "response")
tree <- train(churn ~.,
data = churnTrain,
method = "rpart")
fancyRpartPlot(tree, main="Decision Tree Churn")
tree <- train(churn ~., method = "rpart", data = churnTrain)
tree <- train(factor(churn) ~., method = "rpart", data = churnTrain)
fancyRpartPlot(tree, main="Decision Tree Churn")
fancyRpartPlot(tree$finalModel, main="Decision Tree Churn")
treePred <- predict(tree$finalModel, newdata = churnTest)
treePred <- predict(tree, newdata = churnTest)
confusionMatrix(churnTest$churn, treePred)
lm(churnTest$churn ~ treePred)
(lm(churnTest$churn ~ treePred))$R.Squared
lm <- lm(churnTest$churn ~ treePred)
summary(lm)
library(randomForest)
modRF <- randomForest(factor(churn) ~.,
data = churnTrain,
ntree = 500,
mtry = 2,
importance = TRUE)
modRF
modRF <- randomForest(factor(churn) ~.,
data = churnTrain,
ntree = 500,
mtry = 3,
importance = TRUE)
modRF
modRF <- randomForest(factor(churn) ~.,
data = churnTrain,
ntree = 500,
mtry = 5,
importance = TRUE,
na.action=randomForest::na.roughfix,
replace=FALSE)
modRF
set.seed(1234)
modRF <- randomForest(factor(churn) ~.,
data = churnTrain,
ntree = 500,
mtry = 5,
importance = TRUE,
na.action=randomForest::na.roughfix,
replace=FALSE)
modRF
pROC::roc(modRF$y, as.numeric(modRF$predicted))
pROC::ci.auc(modRF$y, as.numeric(modRF$predicted))
rn round(randomForest::importance(modRF), 2)
round(randomForest::importance(modRF), 2)
rn = round(randomForest::importance(modRF), 2)
rn[order(rn[,3], decreasing=TRUE),]
View(rn)
rn[order(rn[,3], decreasing=TRUE),]
set.seed(1234)
modADA <- ada(factor(churn) ~.,
data = churnTrain,
control=rpart::rpart.control(maxdepth=30,
cp=0.010000,
minsplit=20,
xval=10),
iter=50)
install.packages("ada")
library(ada)
modADA <- ada(factor(churn) ~.,
data = churnTrain,
control=rpart::rpart.control(maxdepth=30,
cp=0.010000,
minsplit=20,
xval=10),
iter=50)
print(modADA)
round(modADA$model$errs[modADA$iter,], 2)
cat('Variables actually used in tree construction:\n')
print(sort(names(listAdaVarsUsed(modADA))))
library(e1071)
set.seed(123)
mySVM <- svm(factor(churn) ~.,
data = churnTrain,
scale = TRUE,
kernel = "radial",
cachesize = 3000,
shrinking = T,
cost = 4,
epsilon = 0.2)
summay(mySVM)
summary(mySVM)
RFPred <- predict(modRF, newdata = churnTest)
confusionMatrix(churnTest$churn, RFPred)
ADAPred <- predict(modADA, newdata = churnTest)
confusionMatrix(churnTest$churn, ADAPred)
SVMPred <- predict(mySVM, newdata = churnTest)
confusionMatrix(churnTest$churn, SVMPred)
rValues <- resamples(list(glm = GLM, DT = tree, RF = modRF, Ada = modADA, svm = mySVM))
rValues <- resamples(list(DT = tree, RF = modRF, Ada = modADA, svm = mySVM))
library(pROC)
AUC.glm <- roc(churnTest$churn, GLMPred)
AUC.tree <- roc(churnTest$churn, treePred)
AUC.tree <- roc(churnTest$churn, as.numeric(treePred))
AUC.RF <- roc(churnTest$churn, RFPred)
AUC.RF <- roc(churnTest$churn, as.numeric(RFPred))
AUC.ada <- roc(churnTest$churn, ADAPred)
AUC.ada <- roc(churnTest$churn, as.numeric(ADAPred))
AUC.SVM <- roc(churnTest$churn, SVMPred)
AUC.SVM <- roc(churnTest$churn, as.numeric(SVMPred))
plot(AUC.glm, col = "blue")
ggplot()+
geom_roc(AUC.glm)
library(plotROC)
install.packages("plotROC")
library(plotROC)
ggplot()+
geom_roc(AUC.glm)
par(new = TRUE)
plot(AUC.tree, col = "red")
par(new = TRUE)
plot(AUC.RF, col = "salmon")
par(new = TRUE)
plot(AUC.ada, col = "green")
par(new = TRUE)
plot(AUC.ada, col = "lightblue")
AUC.SVM <- roc(churnTest$churn, as.numeric(SVMPred))
plot(AUC.glm, col = "blue")
par(new = TRUE)
plot(AUC.tree, col = "red")
par(new = TRUE)
plot(AUC.RF, col = "salmon")
par(new = TRUE)
plot(AUC.ada, col = "green")
par(new = TRUE)
plot(AUC.SVM, col = "lightblue")
legend("right", legend = c("GLM", "Dec.Tree", "RF", "ADA", "SVM"),
col = c("blue", "red", "salmon", "green", "lightblue"), lty = 1)
plot(AUC.glm, col = "blue")
par(new = TRUE)
plot(AUC.tree, col = "red")
par(new = TRUE)
plot(AUC.RF, col = "salmon")
par(new = TRUE)
plot(AUC.ada, col = "green")
par(new = TRUE)
plot(AUC.SVM, col = "lightblue")
legend("right", legend = c("GLM", "Dec.Tree", "RF", "ADA", "SVM"),
col = c("blue", "red", "salmon", "green", "lightblue"), lty = 2)
plot(AUC.glm, col = "blue")
par(new = TRUE)
plot(AUC.tree, col = "red")
par(new = TRUE)
plot(AUC.RF, col = "salmon")
par(new = TRUE)
plot(AUC.ada, col = "green")
par(new = TRUE)
plot(AUC.SVM, col = "lightblue")
legend("right", legend = c("GLM", "Dec.Tree", "RF", "ADA", "SVM"),
col = c("blue", "red", "salmon", "green", "lightblue"), lty = 1)
rm(list = ls())
data <- as.Date("05-03-2017")
data <- as.Date("2017-05-03")
km <- as.numeric(c("1.21", "1.12")
km <- as.numeric(c("1.21", "1.12"))
km <- as.numeric(1.21, 1.12)
km <- as.numeric(c(1.21, 1.12))
getwd()
rm(list = ls())
setwd( "C:/Users/Marcelo/Desktop/Data Science/Data-Science-Specialization/Data products/
")
setwd( "C:/Users/Marcelo/Desktop/Data Science/Data-Science-Specialization/Data products/")
install.packages("shiny")
library(shiny)
runApp('myApp')
runApp()
runApp('myApp')
runApp('myApp')
